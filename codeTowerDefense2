from tkinter import *
import random
from helper import *

prochain_id = 0

def get_prochain_id():
    global prochain_id
    prochain_id += 1
    return "id_"+str(prochain_id)

class Vue():
    def __init__(self, parent):
        self.parent = parent
        self.root = Tk()
        largeur = self.parent.modele.largeur
        hauteur = self.parent.modele.hauteur
        self.canevas = Canvas(self.root, width = largeur, height = hauteur, bg = "red")
        self.canevas.pack()
        self.canevas.bind("<Button-1>", self.deplacer_creep)
        self.canevas.bind("<Button-3>", self.deplacer_tour)
        self.canevas.tag_bind("creep", "<Button>", self.clic_creep)
        self.afficher_jeu(self.parent.modele)

    def clic_creep(self, evt):
        mes_tags = self.canevas.gettags("current")
        if mes_tags[0] == "creep":
            self.parent.cibler_creep(mes_tags[1])
            print(mes_tags)


    def afficher_jeu(self, partie):
        self.canevas.delete("creep")
        self.canevas.delete("obus")
        self.canevas.delete("tour")
        j1 = self.parent.modele.tour
        ajout = 10
        self.canevas.create_rectangle(j1.x-ajout, j1.y-ajout, j1.x+ajout, j1.y+ajout, fill = "blue", tags = ("tour", j1.mon_id))
        ajout = 5
        for i in partie.creeps:
            self.canevas.create_oval(i.x - ajout, i.y - ajout, i.x + ajout, i.y + ajout, fill="yellow", tags = ("creep", i.mon_id))
            self.canevas.create_text(i.x, i.y - (ajout+3), text = i.mon_id, fill="yellow", tags = ("creep", i.mon_id))

        ajout = 3
        for i in partie.tour.obus:
            self.canevas.create_oval(i.x - ajout, i.y - ajout, i.x + ajout, i.y + ajout, fill="green",
                                     tags=("obus", i.mon_id))


    def deplacer_tour(self, evt):
        self.parent.deplacer_tour(evt.x, evt.y)

    def deplacer_creep(self, evt):
        self.parent.boucle_de_jeu()
        self.canevas.unbind("<Button-1>")





        #print(self.root)
        #print(taille)




class Partie():
    def __init__(self, parent):
        self.parent = parent
        self.largeur = 1000
        self.hauteur = 500
        self.tour = None
        self.creeps = []
        self.nbr_creep = 5
        self.initialiser_partie()
        self.nouveau_niveau()




    def initialiser_partie(self):
        x = self.largeur/2 #position par defaut de la tour
        y = self.hauteur/2 # position par defaut de la tour
        self.tour = Tour(self, x, y)

    def nouveau_niveau(self):

        self.nbr_creep += 5
        for i in range(self.nbr_creep):
            xd = -10
            yd = random.randrange(self.hauteur) #position al√©atoire
            xf = self.largeur + 10
            yf = random.randrange(self.hauteur)
            self.creeps.append(Creep(self, xd, yd, xf, yf))


    def jouer_coup(self):
        self.deplacer_creep()
        self.tour.jouer_coup()

    def cibler_creep(self, id_creep):
        creep_vise = None
        for i in self.creeps:
            if i.mon_id == id_creep:
                creep_vise = i
                break
        self.tour.cibler_creep(creep_vise)

    def deplacer_creep(self):
        for i in self.creeps:
            i.deplacer()

    def deplacer_tour(self, x, y):
        self.tour.x = x
        self.tour.y = y





class ObjetDeJeu():
    def __init__(self, parent, x, y):
        self.parent = parent
        self.mon_id = get_prochain_id()
        self.x = x
        self.y = y






class Obus(ObjetDeJeu):
    def __init__(self, parent, cible):
        ObjetDeJeu.__init__(self, parent, parent.x, parent.y)
        self.vitesse = 12
        self.distance_frappe = 50
        self.cible = cible  #objet de type creep
        self.cible.x = cible.x
        self.cible.y = cible.y
        self.angle = Helper.calcAngle(self.x, self.y, self.cible.x, self.cible.y)

    def deplacer(self):
        self.x, self.y = Helper.getAngledPoint(self.angle, self.vitesse, self.x, self.y)  #Helper n'est pas la librairie. C'est la class qui est dans la libraire
        dist = Helper.calcDistance(self.x, self.y, self.cible.x, self.cible.y)
        if dist <= self.distance_frappe:
            return [self, self.cible]
        arrive = Helper.calcDistance(self.x, self.y, self.cible.x, self.cible.y)
        if arrive <= self.vitesse:
            return [self]
        return []







class Creep(ObjetDeJeu):

    def __init__(self, parent, xd, yd, xf, yf):
        ObjetDeJeu.__init__(self, parent, xd, yd)
        self.vitesse = random.randrange(1, 5)
        self.xd = xd
        self.xf = xf
        self.yd = yd
        self.yf = yf

    def deplacer(self):

        angle = Helper.calcAngle(self.xd, self.yd, self.xf, self.yf)
        self.x,self.y = Helper.getAngledPoint(angle,self.vitesse,self.x,self.y)


        if self.x > self.parent.largeur + 10:
            self.x = -10
            self.y = self.yd






class Tour(ObjetDeJeu):


    def __init__(self, parent, x, y):
        ObjetDeJeu.__init__(self, parent, x, y)
        self.obus = []
        self.portee = 150



    def jouer_coup(self):


        for i in self.parent.creeps:
            distance = Helper.calcDistance(self.x, self.y, i.x, i.y)
            if distance <= self.portee:
                mort = []
                for y in self.obus:
                    rep = y.deplacer()
                    if len(rep) == 2:
                        if rep[1] in self.parent.creeps:
                            self.parent.creeps.remove(rep[1])
                            mort.append(y)
                        if len(self.parent.creeps) == 0:
                            self.parent.nouveau_niveau()
                            return
                    elif len(rep) == 1:
                        mort.append(y)
                for i in mort:
                    self.obus.remove(i)






        #for i in self.obus:
         #   rep = i.deplacer()
          #  if len(rep) == 2:
           #     if rep[1] in self.parent.creeps:
            #        self.parent.creeps.remove(rep[1])
             #       mort.append(i)
              #  if len(self.parent.creeps) == 0:
               #     self.parent.nouveau_niveau()
                #    return
            #elif len(rep) == 1:
             #   mort.append(i)
        #for i in mort:
         #   self.obus.remove(i)

    def cibler_creep(self, creep_visee):
        nouvelle_obus = Obus(self, creep_visee)
        self.obus.append(nouvelle_obus)



class Controleur():
    def __init__(self):
        self.modele = Partie(self)
        self.vue = Vue(self)
        self.vue.root.mainloop()

    def boucle_de_jeu(self):
        self.modele.jouer_coup()
        self.vue.afficher_jeu(self.modele)
        self.vue.root.after(40, self.boucle_de_jeu)

    def cibler_creep(self, id_creep):
        self.modele.cibler_creep(id_creep)

    def deplacer_tour(self, x, y):
        self.modele.deplacer_tour(x, y)

if __name__ == "__main__":
    c = Controleur()
